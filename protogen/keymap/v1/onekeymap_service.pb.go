// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: keymap/v1/onekeymap_service.proto

package keymapv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The diff type for exporting.
type ExportKeymapRequest_DiffType int32

const (
	// Unspecified diff type.
	ExportKeymapRequest_DIFF_TYPE_UNSPECIFIED ExportKeymapRequest_DiffType = 0
	// ASCII diff.
	ExportKeymapRequest_ASCII_DIFF ExportKeymapRequest_DiffType = 1
	// Unified diff format.
	ExportKeymapRequest_UNIFIED_DIFF ExportKeymapRequest_DiffType = 2
)

// Enum value maps for ExportKeymapRequest_DiffType.
var (
	ExportKeymapRequest_DiffType_name = map[int32]string{
		0: "DIFF_TYPE_UNSPECIFIED",
		1: "ASCII_DIFF",
		2: "UNIFIED_DIFF",
	}
	ExportKeymapRequest_DiffType_value = map[string]int32{
		"DIFF_TYPE_UNSPECIFIED": 0,
		"ASCII_DIFF":            1,
		"UNIFIED_DIFF":          2,
	}
)

func (x ExportKeymapRequest_DiffType) Enum() *ExportKeymapRequest_DiffType {
	p := new(ExportKeymapRequest_DiffType)
	*p = x
	return p
}

func (x ExportKeymapRequest_DiffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportKeymapRequest_DiffType) Descriptor() protoreflect.EnumDescriptor {
	return file_keymap_v1_onekeymap_service_proto_enumTypes[0].Descriptor()
}

func (ExportKeymapRequest_DiffType) Type() protoreflect.EnumType {
	return &file_keymap_v1_onekeymap_service_proto_enumTypes[0]
}

func (x ExportKeymapRequest_DiffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportKeymapRequest_DiffType.Descriptor instead.
func (ExportKeymapRequest_DiffType) EnumDescriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{4, 0}
}

// ImportKeymapRequest is the request message for ImportKeymap.
type ImportKeymapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The editor type.
	EditorType EditorType `protobuf:"varint,1,opt,name=editor_type,json=editorType,proto3,enum=keymap.v1.EditorType" json:"editor_type,omitempty"`
	// The source keymap file content in editor-specific config syntax
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The base keymap to compare against in onekeymap config syntax
	Base          string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportKeymapRequest) Reset() {
	*x = ImportKeymapRequest{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportKeymapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeymapRequest) ProtoMessage() {}

func (x *ImportKeymapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeymapRequest.ProtoReflect.Descriptor instead.
func (*ImportKeymapRequest) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{0}
}

func (x *ImportKeymapRequest) GetEditorType() EditorType {
	if x != nil {
		return x.EditorType
	}
	return EditorType_EDITOR_TYPE_UNSPECIFIED
}

func (x *ImportKeymapRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ImportKeymapRequest) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

// ImportKeymapResponse is the response message for ImportKeymap.
type ImportKeymapResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The imported keymap.
	Keymap *Keymap `protobuf:"bytes,1,opt,name=keymap,proto3" json:"keymap,omitempty"`
	// The changes between the base and the imported keymap.
	Changes       *KeymapChanges `protobuf:"bytes,2,opt,name=changes,proto3" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportKeymapResponse) Reset() {
	*x = ImportKeymapResponse{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportKeymapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportKeymapResponse) ProtoMessage() {}

func (x *ImportKeymapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportKeymapResponse.ProtoReflect.Descriptor instead.
func (*ImportKeymapResponse) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{1}
}

func (x *ImportKeymapResponse) GetKeymap() *Keymap {
	if x != nil {
		return x.Keymap
	}
	return nil
}

func (x *ImportKeymapResponse) GetChanges() *KeymapChanges {
	if x != nil {
		return x.Changes
	}
	return nil
}

// KeymapChanges represents the changes to a keymap setting.
type KeymapChanges struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The keymaps that are added.
	Add []*Action `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	// The keymaps that are removed.
	Remove []*Action `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
	// The keymaps that are updated.
	Update        []*ActionDiff `protobuf:"bytes,3,rep,name=update,proto3" json:"update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeymapChanges) Reset() {
	*x = KeymapChanges{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeymapChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeymapChanges) ProtoMessage() {}

func (x *KeymapChanges) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeymapChanges.ProtoReflect.Descriptor instead.
func (*KeymapChanges) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{2}
}

func (x *KeymapChanges) GetAdd() []*Action {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *KeymapChanges) GetRemove() []*Action {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *KeymapChanges) GetUpdate() []*ActionDiff {
	if x != nil {
		return x.Update
	}
	return nil
}

// ActionDiff represents the diff of a keymap.
type ActionDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The keymap before the change.
	Origin *Action `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The keymap after the change.
	Updated       *Action `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionDiff) Reset() {
	*x = ActionDiff{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDiff) ProtoMessage() {}

func (x *ActionDiff) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDiff.ProtoReflect.Descriptor instead.
func (*ActionDiff) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{3}
}

func (x *ActionDiff) GetOrigin() *Action {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ActionDiff) GetUpdated() *Action {
	if x != nil {
		return x.Updated
	}
	return nil
}

// ExportKeymapRequest is the request message for ExportKeymap.
type ExportKeymapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The editor type.
	EditorType EditorType `protobuf:"varint,1,opt,name=editor_type,json=editorType,proto3,enum=keymap.v1.EditorType" json:"editor_type,omitempty"`
	// The keymap to export.
	Keymap *Keymap `protobuf:"bytes,2,opt,name=keymap,proto3" json:"keymap,omitempty"`
	// The base keymap to compare against.
	Base string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	// The diff type to use for the export.
	DiffType ExportKeymapRequest_DiffType `protobuf:"varint,4,opt,name=diff_type,json=diffType,proto3,enum=keymap.v1.ExportKeymapRequest_DiffType" json:"diff_type,omitempty"`
	// Optional, file path for the keymap config
	FilePath      string `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportKeymapRequest) Reset() {
	*x = ExportKeymapRequest{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportKeymapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeymapRequest) ProtoMessage() {}

func (x *ExportKeymapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeymapRequest.ProtoReflect.Descriptor instead.
func (*ExportKeymapRequest) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{4}
}

func (x *ExportKeymapRequest) GetEditorType() EditorType {
	if x != nil {
		return x.EditorType
	}
	return EditorType_EDITOR_TYPE_UNSPECIFIED
}

func (x *ExportKeymapRequest) GetKeymap() *Keymap {
	if x != nil {
		return x.Keymap
	}
	return nil
}

func (x *ExportKeymapRequest) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *ExportKeymapRequest) GetDiffType() ExportKeymapRequest_DiffType {
	if x != nil {
		return x.DiffType
	}
	return ExportKeymapRequest_DIFF_TYPE_UNSPECIFIED
}

func (x *ExportKeymapRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// ExportKeymapResponse is the response message for ExportKeymap.
type ExportKeymapResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The exported keymap config, editor-specific.
	Keymap string `protobuf:"bytes,1,opt,name=keymap,proto3" json:"keymap,omitempty"`
	// The diff between the original editor-specific keymap config and the exported keymap.
	Diff          string `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportKeymapResponse) Reset() {
	*x = ExportKeymapResponse{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportKeymapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportKeymapResponse) ProtoMessage() {}

func (x *ExportKeymapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportKeymapResponse.ProtoReflect.Descriptor instead.
func (*ExportKeymapResponse) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{5}
}

func (x *ExportKeymapResponse) GetKeymap() string {
	if x != nil {
		return x.Keymap
	}
	return ""
}

func (x *ExportKeymapResponse) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

// ConfigDetectRequest is the request message for ConfigDetect.
type ConfigDetectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The editor type.
	EditorType    EditorType `protobuf:"varint,1,opt,name=editor_type,json=editorType,proto3,enum=keymap.v1.EditorType" json:"editor_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigDetectRequest) Reset() {
	*x = ConfigDetectRequest{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigDetectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDetectRequest) ProtoMessage() {}

func (x *ConfigDetectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDetectRequest.ProtoReflect.Descriptor instead.
func (*ConfigDetectRequest) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigDetectRequest) GetEditorType() EditorType {
	if x != nil {
		return x.EditorType
	}
	return EditorType_EDITOR_TYPE_UNSPECIFIED
}

// ConfigDetectResponse is the response message for ConfigDetect.
type ConfigDetectResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The default config paths.
	Paths         []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigDetectResponse) Reset() {
	*x = ConfigDetectResponse{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigDetectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDetectResponse) ProtoMessage() {}

func (x *ConfigDetectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDetectResponse.ProtoReflect.Descriptor instead.
func (*ConfigDetectResponse) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigDetectResponse) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

// GetKeymapRequest is the request message for GetKeymap.
type GetKeymapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The config content.
	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Whether to return all keymaps even when there are no bindings yet.
	ReturnAll     bool `protobuf:"varint,2,opt,name=return_all,json=returnAll,proto3" json:"return_all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeymapRequest) Reset() {
	*x = GetKeymapRequest{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeymapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeymapRequest) ProtoMessage() {}

func (x *GetKeymapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeymapRequest.ProtoReflect.Descriptor instead.
func (*GetKeymapRequest) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetKeymapRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *GetKeymapRequest) GetReturnAll() bool {
	if x != nil {
		return x.ReturnAll
	}
	return false
}

// GetKeymapResponse is the response message for GetKeymap.
type GetKeymapResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The loaded keymap.
	Keymap        *Keymap `protobuf:"bytes,1,opt,name=keymap,proto3" json:"keymap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeymapResponse) Reset() {
	*x = GetKeymapResponse{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeymapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeymapResponse) ProtoMessage() {}

func (x *GetKeymapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeymapResponse.ProtoReflect.Descriptor instead.
func (*GetKeymapResponse) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetKeymapResponse) GetKeymap() *Keymap {
	if x != nil {
		return x.Keymap
	}
	return nil
}

// SaveKeymapRequest is the request message for SaveKeymap.
type SaveKeymapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The keymap to save.
	Keymap        *Keymap `protobuf:"bytes,1,opt,name=keymap,proto3" json:"keymap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveKeymapRequest) Reset() {
	*x = SaveKeymapRequest{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveKeymapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveKeymapRequest) ProtoMessage() {}

func (x *SaveKeymapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveKeymapRequest.ProtoReflect.Descriptor instead.
func (*SaveKeymapRequest) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{10}
}

func (x *SaveKeymapRequest) GetKeymap() *Keymap {
	if x != nil {
		return x.Keymap
	}
	return nil
}

// SaveKeymapResponse is the response message for SaveKeymap.
type SaveKeymapResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The saved config content.
	Config        string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveKeymapResponse) Reset() {
	*x = SaveKeymapResponse{}
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveKeymapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveKeymapResponse) ProtoMessage() {}

func (x *SaveKeymapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_onekeymap_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveKeymapResponse.ProtoReflect.Descriptor instead.
func (*SaveKeymapResponse) Descriptor() ([]byte, []int) {
	return file_keymap_v1_onekeymap_service_proto_rawDescGZIP(), []int{11}
}

func (x *SaveKeymapResponse) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

var File_keymap_v1_onekeymap_service_proto protoreflect.FileDescriptor

const file_keymap_v1_onekeymap_service_proto_rawDesc = "" +
	"\n" +
	"!keymap/v1/onekeymap_service.proto\x12\tkeymap.v1\x1a\x16keymap/v1/keymap.proto\x1a\x16keymap/v1/editor.proto\x1a\x18keymap/v1/platform.proto\"y\n" +
	"\x13ImportKeymapRequest\x126\n" +
	"\veditor_type\x18\x01 \x01(\x0e2\x15.keymap.v1.EditorTypeR\n" +
	"editorType\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x12\n" +
	"\x04base\x18\x03 \x01(\tR\x04base\"u\n" +
	"\x14ImportKeymapResponse\x12)\n" +
	"\x06keymap\x18\x01 \x01(\v2\x11.keymap.v1.KeymapR\x06keymap\x122\n" +
	"\achanges\x18\x02 \x01(\v2\x18.keymap.v1.KeymapChangesR\achanges\"\x8e\x01\n" +
	"\rKeymapChanges\x12#\n" +
	"\x03add\x18\x01 \x03(\v2\x11.keymap.v1.ActionR\x03add\x12)\n" +
	"\x06remove\x18\x02 \x03(\v2\x11.keymap.v1.ActionR\x06remove\x12-\n" +
	"\x06update\x18\x03 \x03(\v2\x15.keymap.v1.ActionDiffR\x06update\"d\n" +
	"\n" +
	"ActionDiff\x12)\n" +
	"\x06origin\x18\x01 \x01(\v2\x11.keymap.v1.ActionR\x06origin\x12+\n" +
	"\aupdated\x18\x02 \x01(\v2\x11.keymap.v1.ActionR\aupdated\"\xb8\x02\n" +
	"\x13ExportKeymapRequest\x126\n" +
	"\veditor_type\x18\x01 \x01(\x0e2\x15.keymap.v1.EditorTypeR\n" +
	"editorType\x12)\n" +
	"\x06keymap\x18\x02 \x01(\v2\x11.keymap.v1.KeymapR\x06keymap\x12\x12\n" +
	"\x04base\x18\x03 \x01(\tR\x04base\x12D\n" +
	"\tdiff_type\x18\x04 \x01(\x0e2'.keymap.v1.ExportKeymapRequest.DiffTypeR\bdiffType\x12\x1b\n" +
	"\tfile_path\x18\x05 \x01(\tR\bfilePath\"G\n" +
	"\bDiffType\x12\x19\n" +
	"\x15DIFF_TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"ASCII_DIFF\x10\x01\x12\x10\n" +
	"\fUNIFIED_DIFF\x10\x02\"B\n" +
	"\x14ExportKeymapResponse\x12\x16\n" +
	"\x06keymap\x18\x01 \x01(\tR\x06keymap\x12\x12\n" +
	"\x04diff\x18\x02 \x01(\tR\x04diff\"M\n" +
	"\x13ConfigDetectRequest\x126\n" +
	"\veditor_type\x18\x01 \x01(\x0e2\x15.keymap.v1.EditorTypeR\n" +
	"editorType\",\n" +
	"\x14ConfigDetectResponse\x12\x14\n" +
	"\x05paths\x18\x01 \x03(\tR\x05paths\"I\n" +
	"\x10GetKeymapRequest\x12\x16\n" +
	"\x06config\x18\x01 \x01(\tR\x06config\x12\x1d\n" +
	"\n" +
	"return_all\x18\x02 \x01(\bR\treturnAll\">\n" +
	"\x11GetKeymapResponse\x12)\n" +
	"\x06keymap\x18\x01 \x01(\v2\x11.keymap.v1.KeymapR\x06keymap\">\n" +
	"\x11SaveKeymapRequest\x12)\n" +
	"\x06keymap\x18\x01 \x01(\v2\x11.keymap.v1.KeymapR\x06keymap\",\n" +
	"\x12SaveKeymapResponse\x12\x16\n" +
	"\x06config\x18\x01 \x01(\tR\x06config2\x98\x03\n" +
	"\x10OnekeymapService\x12O\n" +
	"\fImportKeymap\x12\x1e.keymap.v1.ImportKeymapRequest\x1a\x1f.keymap.v1.ImportKeymapResponse\x12O\n" +
	"\fExportKeymap\x12\x1e.keymap.v1.ExportKeymapRequest\x1a\x1f.keymap.v1.ExportKeymapResponse\x12O\n" +
	"\fConfigDetect\x12\x1e.keymap.v1.ConfigDetectRequest\x1a\x1f.keymap.v1.ConfigDetectResponse\x12F\n" +
	"\tGetKeymap\x12\x1b.keymap.v1.GetKeymapRequest\x1a\x1c.keymap.v1.GetKeymapResponse\x12I\n" +
	"\n" +
	"SaveKeymap\x12\x1c.keymap.v1.SaveKeymapRequest\x1a\x1d.keymap.v1.SaveKeymapResponseB\xa6\x01\n" +
	"\rcom.keymap.v1B\x15OnekeymapServiceProtoP\x01Z9github.com/xinnjie/watchbeats/protogen/keymap/v1;keymapv1\xa2\x02\x03KXX\xaa\x02\tKeymap.V1\xca\x02\tKeymap\\V1\xe2\x02\x15Keymap\\V1\\GPBMetadata\xea\x02\n" +
	"Keymap::V1b\x06proto3"

var (
	file_keymap_v1_onekeymap_service_proto_rawDescOnce sync.Once
	file_keymap_v1_onekeymap_service_proto_rawDescData []byte
)

func file_keymap_v1_onekeymap_service_proto_rawDescGZIP() []byte {
	file_keymap_v1_onekeymap_service_proto_rawDescOnce.Do(func() {
		file_keymap_v1_onekeymap_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_keymap_v1_onekeymap_service_proto_rawDesc), len(file_keymap_v1_onekeymap_service_proto_rawDesc)))
	})
	return file_keymap_v1_onekeymap_service_proto_rawDescData
}

var file_keymap_v1_onekeymap_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_keymap_v1_onekeymap_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_keymap_v1_onekeymap_service_proto_goTypes = []any{
	(ExportKeymapRequest_DiffType)(0), // 0: keymap.v1.ExportKeymapRequest.DiffType
	(*ImportKeymapRequest)(nil),       // 1: keymap.v1.ImportKeymapRequest
	(*ImportKeymapResponse)(nil),      // 2: keymap.v1.ImportKeymapResponse
	(*KeymapChanges)(nil),             // 3: keymap.v1.KeymapChanges
	(*ActionDiff)(nil),                // 4: keymap.v1.ActionDiff
	(*ExportKeymapRequest)(nil),       // 5: keymap.v1.ExportKeymapRequest
	(*ExportKeymapResponse)(nil),      // 6: keymap.v1.ExportKeymapResponse
	(*ConfigDetectRequest)(nil),       // 7: keymap.v1.ConfigDetectRequest
	(*ConfigDetectResponse)(nil),      // 8: keymap.v1.ConfigDetectResponse
	(*GetKeymapRequest)(nil),          // 9: keymap.v1.GetKeymapRequest
	(*GetKeymapResponse)(nil),         // 10: keymap.v1.GetKeymapResponse
	(*SaveKeymapRequest)(nil),         // 11: keymap.v1.SaveKeymapRequest
	(*SaveKeymapResponse)(nil),        // 12: keymap.v1.SaveKeymapResponse
	(EditorType)(0),                   // 13: keymap.v1.EditorType
	(*Keymap)(nil),                    // 14: keymap.v1.Keymap
	(*Action)(nil),                    // 15: keymap.v1.Action
}
var file_keymap_v1_onekeymap_service_proto_depIdxs = []int32{
	13, // 0: keymap.v1.ImportKeymapRequest.editor_type:type_name -> keymap.v1.EditorType
	14, // 1: keymap.v1.ImportKeymapResponse.keymap:type_name -> keymap.v1.Keymap
	3,  // 2: keymap.v1.ImportKeymapResponse.changes:type_name -> keymap.v1.KeymapChanges
	15, // 3: keymap.v1.KeymapChanges.add:type_name -> keymap.v1.Action
	15, // 4: keymap.v1.KeymapChanges.remove:type_name -> keymap.v1.Action
	4,  // 5: keymap.v1.KeymapChanges.update:type_name -> keymap.v1.ActionDiff
	15, // 6: keymap.v1.ActionDiff.origin:type_name -> keymap.v1.Action
	15, // 7: keymap.v1.ActionDiff.updated:type_name -> keymap.v1.Action
	13, // 8: keymap.v1.ExportKeymapRequest.editor_type:type_name -> keymap.v1.EditorType
	14, // 9: keymap.v1.ExportKeymapRequest.keymap:type_name -> keymap.v1.Keymap
	0,  // 10: keymap.v1.ExportKeymapRequest.diff_type:type_name -> keymap.v1.ExportKeymapRequest.DiffType
	13, // 11: keymap.v1.ConfigDetectRequest.editor_type:type_name -> keymap.v1.EditorType
	14, // 12: keymap.v1.GetKeymapResponse.keymap:type_name -> keymap.v1.Keymap
	14, // 13: keymap.v1.SaveKeymapRequest.keymap:type_name -> keymap.v1.Keymap
	1,  // 14: keymap.v1.OnekeymapService.ImportKeymap:input_type -> keymap.v1.ImportKeymapRequest
	5,  // 15: keymap.v1.OnekeymapService.ExportKeymap:input_type -> keymap.v1.ExportKeymapRequest
	7,  // 16: keymap.v1.OnekeymapService.ConfigDetect:input_type -> keymap.v1.ConfigDetectRequest
	9,  // 17: keymap.v1.OnekeymapService.GetKeymap:input_type -> keymap.v1.GetKeymapRequest
	11, // 18: keymap.v1.OnekeymapService.SaveKeymap:input_type -> keymap.v1.SaveKeymapRequest
	2,  // 19: keymap.v1.OnekeymapService.ImportKeymap:output_type -> keymap.v1.ImportKeymapResponse
	6,  // 20: keymap.v1.OnekeymapService.ExportKeymap:output_type -> keymap.v1.ExportKeymapResponse
	8,  // 21: keymap.v1.OnekeymapService.ConfigDetect:output_type -> keymap.v1.ConfigDetectResponse
	10, // 22: keymap.v1.OnekeymapService.GetKeymap:output_type -> keymap.v1.GetKeymapResponse
	12, // 23: keymap.v1.OnekeymapService.SaveKeymap:output_type -> keymap.v1.SaveKeymapResponse
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_keymap_v1_onekeymap_service_proto_init() }
func file_keymap_v1_onekeymap_service_proto_init() {
	if File_keymap_v1_onekeymap_service_proto != nil {
		return
	}
	file_keymap_v1_keymap_proto_init()
	file_keymap_v1_editor_proto_init()
	file_keymap_v1_platform_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_keymap_v1_onekeymap_service_proto_rawDesc), len(file_keymap_v1_onekeymap_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keymap_v1_onekeymap_service_proto_goTypes,
		DependencyIndexes: file_keymap_v1_onekeymap_service_proto_depIdxs,
		EnumInfos:         file_keymap_v1_onekeymap_service_proto_enumTypes,
		MessageInfos:      file_keymap_v1_onekeymap_service_proto_msgTypes,
	}.Build()
	File_keymap_v1_onekeymap_service_proto = out.File
	file_keymap_v1_onekeymap_service_proto_goTypes = nil
	file_keymap_v1_onekeymap_service_proto_depIdxs = nil
}
