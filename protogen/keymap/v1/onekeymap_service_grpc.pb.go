// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: keymap/v1/onekeymap_service.proto

package keymapv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnekeymapService_ImportKeymap_FullMethodName = "/keymap.v1.OnekeymapService/ImportKeymap"
	OnekeymapService_ExportKeymap_FullMethodName = "/keymap.v1.OnekeymapService/ExportKeymap"
	OnekeymapService_ConfigDetect_FullMethodName = "/keymap.v1.OnekeymapService/ConfigDetect"
	OnekeymapService_GetKeymap_FullMethodName    = "/keymap.v1.OnekeymapService/GetKeymap"
	OnekeymapService_SaveKeymap_FullMethodName   = "/keymap.v1.OnekeymapService/SaveKeymap"
)

// OnekeymapServiceClient is the client API for OnekeymapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OnekeymapService provides APIs for managing keymap settings for the UI.
type OnekeymapServiceClient interface {
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// ImportKeymap imports a keymap from a file.
	ImportKeymap(ctx context.Context, in *ImportKeymapRequest, opts ...grpc.CallOption) (*ImportKeymapResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// ExportKeymap exports the current keymap settings.
	ExportKeymap(ctx context.Context, in *ExportKeymapRequest, opts ...grpc.CallOption) (*ExportKeymapResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// ConfigDetect returns the default config path.
	ConfigDetect(ctx context.Context, in *ConfigDetectRequest, opts ...grpc.CallOption) (*ConfigDetectResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// (-- api-linter: core::0131::response-message-name=disabled
	//
	//	aip.dev/not-precedent: GetKeymap is not a standard Get method, it loads from config content --)
	//
	// (-- api-linter: core::0131::request-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: GetKeymap uses config content, not resource name --)
	//
	// (-- api-linter: core::0131::request-name-required=disabled
	//
	//	aip.dev/not-precedent: GetKeymap uses config content, not resource name --)
	//
	// GetKeymap loads a keymap from a text content.
	GetKeymap(ctx context.Context, in *GetKeymapRequest, opts ...grpc.CallOption) (*GetKeymapResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// SaveKeymap saves the current keymap settings to a text content.
	SaveKeymap(ctx context.Context, in *SaveKeymapRequest, opts ...grpc.CallOption) (*SaveKeymapResponse, error)
}

type onekeymapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnekeymapServiceClient(cc grpc.ClientConnInterface) OnekeymapServiceClient {
	return &onekeymapServiceClient{cc}
}

func (c *onekeymapServiceClient) ImportKeymap(ctx context.Context, in *ImportKeymapRequest, opts ...grpc.CallOption) (*ImportKeymapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportKeymapResponse)
	err := c.cc.Invoke(ctx, OnekeymapService_ImportKeymap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onekeymapServiceClient) ExportKeymap(ctx context.Context, in *ExportKeymapRequest, opts ...grpc.CallOption) (*ExportKeymapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportKeymapResponse)
	err := c.cc.Invoke(ctx, OnekeymapService_ExportKeymap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onekeymapServiceClient) ConfigDetect(ctx context.Context, in *ConfigDetectRequest, opts ...grpc.CallOption) (*ConfigDetectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigDetectResponse)
	err := c.cc.Invoke(ctx, OnekeymapService_ConfigDetect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onekeymapServiceClient) GetKeymap(ctx context.Context, in *GetKeymapRequest, opts ...grpc.CallOption) (*GetKeymapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeymapResponse)
	err := c.cc.Invoke(ctx, OnekeymapService_GetKeymap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onekeymapServiceClient) SaveKeymap(ctx context.Context, in *SaveKeymapRequest, opts ...grpc.CallOption) (*SaveKeymapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveKeymapResponse)
	err := c.cc.Invoke(ctx, OnekeymapService_SaveKeymap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnekeymapServiceServer is the server API for OnekeymapService service.
// All implementations must embed UnimplementedOnekeymapServiceServer
// for forward compatibility.
//
// OnekeymapService provides APIs for managing keymap settings for the UI.
type OnekeymapServiceServer interface {
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// ImportKeymap imports a keymap from a file.
	ImportKeymap(context.Context, *ImportKeymapRequest) (*ImportKeymapResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// ExportKeymap exports the current keymap settings.
	ExportKeymap(context.Context, *ExportKeymapRequest) (*ExportKeymapResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// ConfigDetect returns the default config path.
	ConfigDetect(context.Context, *ConfigDetectRequest) (*ConfigDetectResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// (-- api-linter: core::0131::response-message-name=disabled
	//
	//	aip.dev/not-precedent: GetKeymap is not a standard Get method, it loads from config content --)
	//
	// (-- api-linter: core::0131::request-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: GetKeymap uses config content, not resource name --)
	//
	// (-- api-linter: core::0131::request-name-required=disabled
	//
	//	aip.dev/not-precedent: GetKeymap uses config content, not resource name --)
	//
	// GetKeymap loads a keymap from a text content.
	GetKeymap(context.Context, *GetKeymapRequest) (*GetKeymapResponse, error)
	// (-- api-linter: core::0127::http-annotation=disabled
	//
	//	aip.dev/not-precedent: OnekeymapService only support grpc --)
	//
	// SaveKeymap saves the current keymap settings to a text content.
	SaveKeymap(context.Context, *SaveKeymapRequest) (*SaveKeymapResponse, error)
	mustEmbedUnimplementedOnekeymapServiceServer()
}

// UnimplementedOnekeymapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnekeymapServiceServer struct{}

func (UnimplementedOnekeymapServiceServer) ImportKeymap(context.Context, *ImportKeymapRequest) (*ImportKeymapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportKeymap not implemented")
}
func (UnimplementedOnekeymapServiceServer) ExportKeymap(context.Context, *ExportKeymapRequest) (*ExportKeymapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportKeymap not implemented")
}
func (UnimplementedOnekeymapServiceServer) ConfigDetect(context.Context, *ConfigDetectRequest) (*ConfigDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDetect not implemented")
}
func (UnimplementedOnekeymapServiceServer) GetKeymap(context.Context, *GetKeymapRequest) (*GetKeymapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeymap not implemented")
}
func (UnimplementedOnekeymapServiceServer) SaveKeymap(context.Context, *SaveKeymapRequest) (*SaveKeymapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveKeymap not implemented")
}
func (UnimplementedOnekeymapServiceServer) mustEmbedUnimplementedOnekeymapServiceServer() {}
func (UnimplementedOnekeymapServiceServer) testEmbeddedByValue()                          {}

// UnsafeOnekeymapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnekeymapServiceServer will
// result in compilation errors.
type UnsafeOnekeymapServiceServer interface {
	mustEmbedUnimplementedOnekeymapServiceServer()
}

func RegisterOnekeymapServiceServer(s grpc.ServiceRegistrar, srv OnekeymapServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnekeymapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnekeymapService_ServiceDesc, srv)
}

func _OnekeymapService_ImportKeymap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportKeymapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnekeymapServiceServer).ImportKeymap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnekeymapService_ImportKeymap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnekeymapServiceServer).ImportKeymap(ctx, req.(*ImportKeymapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnekeymapService_ExportKeymap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportKeymapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnekeymapServiceServer).ExportKeymap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnekeymapService_ExportKeymap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnekeymapServiceServer).ExportKeymap(ctx, req.(*ExportKeymapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnekeymapService_ConfigDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnekeymapServiceServer).ConfigDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnekeymapService_ConfigDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnekeymapServiceServer).ConfigDetect(ctx, req.(*ConfigDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnekeymapService_GetKeymap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeymapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnekeymapServiceServer).GetKeymap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnekeymapService_GetKeymap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnekeymapServiceServer).GetKeymap(ctx, req.(*GetKeymapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnekeymapService_SaveKeymap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveKeymapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnekeymapServiceServer).SaveKeymap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnekeymapService_SaveKeymap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnekeymapServiceServer).SaveKeymap(ctx, req.(*SaveKeymapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnekeymapService_ServiceDesc is the grpc.ServiceDesc for OnekeymapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnekeymapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keymap.v1.OnekeymapService",
	HandlerType: (*OnekeymapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportKeymap",
			Handler:    _OnekeymapService_ImportKeymap_Handler,
		},
		{
			MethodName: "ExportKeymap",
			Handler:    _OnekeymapService_ExportKeymap_Handler,
		},
		{
			MethodName: "ConfigDetect",
			Handler:    _OnekeymapService_ConfigDetect_Handler,
		},
		{
			MethodName: "GetKeymap",
			Handler:    _OnekeymapService_GetKeymap_Handler,
		},
		{
			MethodName: "SaveKeymap",
			Handler:    _OnekeymapService_SaveKeymap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keymap/v1/onekeymap_service.proto",
}
