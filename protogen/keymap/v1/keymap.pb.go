// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: keymap/v1/keymap.proto

package keymapv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Keymap is the root message, representing a complete set of keybindings.
type Keymap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Keymap name should follow "users/{user}/keymaps/{keymap}" pattern, e.g. users/1234/keymaps/1
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (-- api-linter: core::0122::embedded-resource=disabled
	//
	//	aip.dev/not-precedent: Action is a value object, not a separately managed resource --)
	//
	// The actions.
	// One action may correspond to multiple keybindings. Then there would be multiple Action
	// with the same keybinding but different id.
	// Clients should merge Action that share the same `id` if necessary.
	Actions       []*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Keymap) Reset() {
	*x = Keymap{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Keymap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keymap) ProtoMessage() {}

func (x *Keymap) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keymap.ProtoReflect.Descriptor instead.
func (*Keymap) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{0}
}

func (x *Keymap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Keymap) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Action represents a single mapping from multiple key bindings to a logical action.
type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Action name should follow "keymap/{keymap}/action/{name}" pattern, e.g. keymap/1/action/actions.editor.copy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The key bindings that trigger the action.
	// e.g. ctrl+s, ctrl+shift+s
	Bindings []*KeybindingReadable `protobuf:"bytes,2,rep,name=bindings,proto3" json:"bindings,omitempty"`
	// The action config
	ActionConfig *ActionConfig `protobuf:"bytes,3,opt,name=action_config,json=actionConfig,proto3" json:"action_config,omitempty"`
	// Optional, user-provided comment for this keymap.
	Comment       string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{1}
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action) GetBindings() []*KeybindingReadable {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *Action) GetActionConfig() *ActionConfig {
	if x != nil {
		return x.ActionConfig
	}
	return nil
}

func (x *Action) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// KeyChord represents a combination of a primary key and optional modifiers. e.g. "ctrl+s"
type KeyChord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The primary, non-modifier key being pressed.
	KeyCode KeyCode `protobuf:"varint,1,opt,name=key_code,json=keyCode,proto3,enum=keymap.v1.KeyCode" json:"key_code,omitempty"`
	// A list of modifier keys held down with the primary key.
	Modifiers     []KeyModifier `protobuf:"varint,2,rep,packed,name=modifiers,proto3,enum=keymap.v1.KeyModifier" json:"modifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyChord) Reset() {
	*x = KeyChord{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyChord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyChord) ProtoMessage() {}

func (x *KeyChord) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyChord.ProtoReflect.Descriptor instead.
func (*KeyChord) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{2}
}

func (x *KeyChord) GetKeyCode() KeyCode {
	if x != nil {
		return x.KeyCode
	}
	return KeyCode_KEY_CODE_UNSPECIFIED
}

func (x *KeyChord) GetModifiers() []KeyModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

// Keybinding represents a sequence of one or more key chords that must be
// pressed in order to trigger an action. This allows for multi-key sequences
// like "shift shift" or "ctrl+k ctrl+s".
type Keybinding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The sequence of key chords.
	Chords        []*KeyChord `protobuf:"bytes,1,rep,name=chords,proto3" json:"chords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Keybinding) Reset() {
	*x = Keybinding{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Keybinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keybinding) ProtoMessage() {}

func (x *Keybinding) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keybinding.ProtoReflect.Descriptor instead.
func (*Keybinding) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{3}
}

func (x *Keybinding) GetChords() []*KeyChord {
	if x != nil {
		return x.Chords
	}
	return nil
}

// KeybindingReadable represents a single keybinding with its readable string
type KeybindingReadable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The key binding that triggers an action.
	KeyChords *Keybinding `protobuf:"bytes,1,opt,name=key_chords,json=keyChords,proto3" json:"key_chords,omitempty"`
	// The readable key binding that triggers an action. e.g. "ctrl+s"
	KeyChordsReadable string `protobuf:"bytes,2,opt,name=key_chords_readable,json=keyChordsReadable,proto3" json:"key_chords_readable,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KeybindingReadable) Reset() {
	*x = KeybindingReadable{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeybindingReadable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeybindingReadable) ProtoMessage() {}

func (x *KeybindingReadable) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeybindingReadable.ProtoReflect.Descriptor instead.
func (*KeybindingReadable) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{4}
}

func (x *KeybindingReadable) GetKeyChords() *Keybinding {
	if x != nil {
		return x.KeyChords
	}
	return nil
}

func (x *KeybindingReadable) GetKeyChordsReadable() string {
	if x != nil {
		return x.KeyChordsReadable
	}
	return ""
}

// ActionConfig represents the configuration of an action.
type ActionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the action
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// description of the action
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// category of the action
	// e.g. "Editor", "Terminal"
	// Has subcategories if category has ".", e.g. "Editor.Clipboard"
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	// editor support information for this action
	EditorSupport []*EditorSupport `protobuf:"bytes,4,rep,name=editor_support,json=editorSupport,proto3" json:"editor_support,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionConfig) Reset() {
	*x = ActionConfig{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConfig) ProtoMessage() {}

func (x *ActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConfig.ProtoReflect.Descriptor instead.
func (*ActionConfig) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{5}
}

func (x *ActionConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ActionConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ActionConfig) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ActionConfig) GetEditorSupport() []*EditorSupport {
	if x != nil {
		return x.EditorSupport
	}
	return nil
}

// EditorSupport represents whether an action is supported by a specific editor.
type EditorSupport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The editor type
	EditorType EditorType `protobuf:"varint,1,opt,name=editor_type,json=editorType,proto3,enum=keymap.v1.EditorType" json:"editor_type,omitempty"`
	// Whether this action is supported by the editor
	Supported bool `protobuf:"varint,2,opt,name=supported,proto3" json:"supported,omitempty"`
	// Reason why this action is not supported (only set when supported = false)
	NotSupportedReason string `protobuf:"bytes,3,opt,name=not_supported_reason,json=notSupportedReason,proto3" json:"not_supported_reason,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EditorSupport) Reset() {
	*x = EditorSupport{}
	mi := &file_keymap_v1_keymap_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditorSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorSupport) ProtoMessage() {}

func (x *EditorSupport) ProtoReflect() protoreflect.Message {
	mi := &file_keymap_v1_keymap_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorSupport.ProtoReflect.Descriptor instead.
func (*EditorSupport) Descriptor() ([]byte, []int) {
	return file_keymap_v1_keymap_proto_rawDescGZIP(), []int{6}
}

func (x *EditorSupport) GetEditorType() EditorType {
	if x != nil {
		return x.EditorType
	}
	return EditorType_EDITOR_TYPE_UNSPECIFIED
}

func (x *EditorSupport) GetSupported() bool {
	if x != nil {
		return x.Supported
	}
	return false
}

func (x *EditorSupport) GetNotSupportedReason() string {
	if x != nil {
		return x.NotSupportedReason
	}
	return ""
}

var File_keymap_v1_keymap_proto protoreflect.FileDescriptor

const file_keymap_v1_keymap_proto_rawDesc = "" +
	"\n" +
	"\x16keymap/v1/keymap.proto\x12\tkeymap.v1\x1a\x19google/api/resource.proto\x1a\x17keymap/v1/keycode.proto\x1a\x16keymap/v1/editor.proto\x1a\x1fgoogle/api/field_behavior.proto\"\x9d\x01\n" +
	"\x06Keymap\x12,\n" +
	"\x04name\x18\x01 \x01(\tB\x18\xe0A\b\xfaA\x12\x12\x10keymap.v1.KeymapR\x04name\x12+\n" +
	"\aactions\x18\x02 \x03(\v2\x11.keymap.v1.ActionR\aactions:8\xeaA5\n" +
	"\x14onekeymap.com/Keymap\x12\x1dusers/{user}/keymaps/{keymap}\"\xce\x01\n" +
	"\x06Action\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\bR\x04name\x129\n" +
	"\bbindings\x18\x02 \x03(\v2\x1d.keymap.v1.KeybindingReadableR\bbindings\x12<\n" +
	"\raction_config\x18\x03 \x01(\v2\x17.keymap.v1.ActionConfigR\factionConfig\x12\x18\n" +
	"\acomment\x18\x04 \x01(\tR\acomment:\x18\xeaA\x15\n" +
	"\x10keymap.v1/Action\x12\x01*\"o\n" +
	"\bKeyChord\x12-\n" +
	"\bkey_code\x18\x01 \x01(\x0e2\x12.keymap.v1.KeyCodeR\akeyCode\x124\n" +
	"\tmodifiers\x18\x02 \x03(\x0e2\x16.keymap.v1.KeyModifierR\tmodifiers\"9\n" +
	"\n" +
	"Keybinding\x12+\n" +
	"\x06chords\x18\x01 \x03(\v2\x13.keymap.v1.KeyChordR\x06chords\"z\n" +
	"\x12KeybindingReadable\x124\n" +
	"\n" +
	"key_chords\x18\x01 \x01(\v2\x15.keymap.v1.KeybindingR\tkeyChords\x12.\n" +
	"\x13key_chords_readable\x18\x02 \x01(\tR\x11keyChordsReadable\"\xb0\x01\n" +
	"\fActionConfig\x12!\n" +
	"\fdisplay_name\x18\x01 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1a\n" +
	"\bcategory\x18\x03 \x01(\tR\bcategory\x12?\n" +
	"\x0eeditor_support\x18\x04 \x03(\v2\x18.keymap.v1.EditorSupportR\reditorSupport\"\x97\x01\n" +
	"\rEditorSupport\x126\n" +
	"\veditor_type\x18\x01 \x01(\x0e2\x15.keymap.v1.EditorTypeR\n" +
	"editorType\x12\x1c\n" +
	"\tsupported\x18\x02 \x01(\bR\tsupported\x120\n" +
	"\x14not_supported_reason\x18\x03 \x01(\tR\x12notSupportedReasonB\x9c\x01\n" +
	"\rcom.keymap.v1B\vKeymapProtoP\x01Z9github.com/xinnjie/watchbeats/protogen/keymap/v1;keymapv1\xa2\x02\x03KXX\xaa\x02\tKeymap.V1\xca\x02\tKeymap\\V1\xe2\x02\x15Keymap\\V1\\GPBMetadata\xea\x02\n" +
	"Keymap::V1b\x06proto3"

var (
	file_keymap_v1_keymap_proto_rawDescOnce sync.Once
	file_keymap_v1_keymap_proto_rawDescData []byte
)

func file_keymap_v1_keymap_proto_rawDescGZIP() []byte {
	file_keymap_v1_keymap_proto_rawDescOnce.Do(func() {
		file_keymap_v1_keymap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_keymap_v1_keymap_proto_rawDesc), len(file_keymap_v1_keymap_proto_rawDesc)))
	})
	return file_keymap_v1_keymap_proto_rawDescData
}

var file_keymap_v1_keymap_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_keymap_v1_keymap_proto_goTypes = []any{
	(*Keymap)(nil),             // 0: keymap.v1.Keymap
	(*Action)(nil),             // 1: keymap.v1.Action
	(*KeyChord)(nil),           // 2: keymap.v1.KeyChord
	(*Keybinding)(nil),         // 3: keymap.v1.Keybinding
	(*KeybindingReadable)(nil), // 4: keymap.v1.KeybindingReadable
	(*ActionConfig)(nil),       // 5: keymap.v1.ActionConfig
	(*EditorSupport)(nil),      // 6: keymap.v1.EditorSupport
	(KeyCode)(0),               // 7: keymap.v1.KeyCode
	(KeyModifier)(0),           // 8: keymap.v1.KeyModifier
	(EditorType)(0),            // 9: keymap.v1.EditorType
}
var file_keymap_v1_keymap_proto_depIdxs = []int32{
	1, // 0: keymap.v1.Keymap.actions:type_name -> keymap.v1.Action
	4, // 1: keymap.v1.Action.bindings:type_name -> keymap.v1.KeybindingReadable
	5, // 2: keymap.v1.Action.action_config:type_name -> keymap.v1.ActionConfig
	7, // 3: keymap.v1.KeyChord.key_code:type_name -> keymap.v1.KeyCode
	8, // 4: keymap.v1.KeyChord.modifiers:type_name -> keymap.v1.KeyModifier
	2, // 5: keymap.v1.Keybinding.chords:type_name -> keymap.v1.KeyChord
	3, // 6: keymap.v1.KeybindingReadable.key_chords:type_name -> keymap.v1.Keybinding
	6, // 7: keymap.v1.ActionConfig.editor_support:type_name -> keymap.v1.EditorSupport
	9, // 8: keymap.v1.EditorSupport.editor_type:type_name -> keymap.v1.EditorType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_keymap_v1_keymap_proto_init() }
func file_keymap_v1_keymap_proto_init() {
	if File_keymap_v1_keymap_proto != nil {
		return
	}
	file_keymap_v1_keycode_proto_init()
	file_keymap_v1_editor_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_keymap_v1_keymap_proto_rawDesc), len(file_keymap_v1_keymap_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_keymap_v1_keymap_proto_goTypes,
		DependencyIndexes: file_keymap_v1_keymap_proto_depIdxs,
		MessageInfos:      file_keymap_v1_keymap_proto_msgTypes,
	}.Build()
	File_keymap_v1_keymap_proto = out.File
	file_keymap_v1_keymap_proto_goTypes = nil
	file_keymap_v1_keymap_proto_depIdxs = nil
}
